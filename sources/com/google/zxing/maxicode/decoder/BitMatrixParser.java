package com.google.zxing.maxicode.decoder;

import androidx.core.app.FrameMetricsAggregator;
import androidx.recyclerview.widget.ItemTouchHelper;
import com.google.android.exoplayer2.extractor.p008ts.PsExtractor;
import com.google.android.exoplayer2.extractor.p008ts.TsExtractor;
import com.google.logging.type.LogSeverity;
import com.google.zxing.common.BitMatrix;
import com.lowagie.text.Jpeg;
import com.lowagie.text.pdf.codec.TIFFConstants;
import com.lowagie.text.pdf.codec.wmf.MetaDo;
import com.wowza.gocoder.sdk.api.configuration.WOWZMediaConfig;
import com.wowza.gocoder.sdk.support.wmstransport.wms.p042a.p044b.C4317c;
import com.wowza.gocoder.sdk.support.wse.jni.wmstransport.WMSTransport;
import p052cz.msebera.android.httpclient.HttpStatus;
import repack.org.bouncycastle.crypto.tls.CipherSuite;

final class BitMatrixParser {
    private static final int[][] BITNR = {new int[]{121, 120, 127, 126, 133, 132, CipherSuite.TLS_PSK_WITH_3DES_EDE_CBC_SHA, 138, CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA, CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA, 151, 150, 157, 156, 163, 162, 169, 168, 175, 174, 181, 180, 187, 186, 193, PsExtractor.AUDIO_STREAM, 199, 198, -2, -2}, new int[]{123, 122, 129, 128, 135, TsExtractor.TS_STREAM_TYPE_SPLICE_INFO, CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA, CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA, CipherSuite.TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA, CipherSuite.TLS_RSA_PSK_WITH_RC4_128_SHA, 153, 152, 159, 158, 165, 164, 171, 170, 177, 176, 183, 182, PsExtractor.PRIVATE_STREAM_1, 188, 195, 194, 201, 200, 816, -3}, new int[]{125, 124, 131, TsExtractor.TS_STREAM_TYPE_HDMV_DTS, 137, 136, CipherSuite.TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA, CipherSuite.TLS_DHE_PSK_WITH_RC4_128_SHA, CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA, CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA, 155, 154, 161, 160, 167, 166, 173, TsExtractor.TS_STREAM_TYPE_AC4, 179, 178, 185, 184, 191, 190, 197, 196, 203, 202, 818, 817}, new int[]{TIFFConstants.TIFFTAG_YRESOLUTION, TIFFConstants.TIFFTAG_XRESOLUTION, TIFFConstants.TIFFTAG_SAMPLESPERPIXEL, 276, TIFFConstants.TIFFTAG_MAKE, TIFFConstants.TIFFTAG_IMAGEDESCRIPTION, TIFFConstants.TIFFTAG_CELLLENGTH, 264, 259, 258, 253, 252, MetaDo.META_CREATEPALETTE, 246, 241, PsExtractor.VIDEO_STREAM_MASK, 235, 234, 229, 228, 223, 222, 217, 216, 211, WMSTransport.SESSIONSTATE_CONNECT_REDIRECT, HttpStatus.SC_RESET_CONTENT, HttpStatus.SC_NO_CONTENT, 819, -3}, new int[]{TIFFConstants.TIFFTAG_PAGENAME, TIFFConstants.TIFFTAG_PLANARCONFIG, TIFFConstants.TIFFTAG_STRIPBYTECOUNTS, TIFFConstants.TIFFTAG_ROWSPERSTRIP, TIFFConstants.TIFFTAG_STRIPOFFSETS, TIFFConstants.TIFFTAG_MODEL, 267, TIFFConstants.TIFFTAG_FILLORDER, MetaDo.META_SETRELABS, MetaDo.META_SETROP2, 255, TIFFConstants.TIFFTAG_SUBFILETYPE, 249, 248, 243, 242, 237, 236, 231, 230, 225, 224, 219, 218, 213, 212, HttpStatus.SC_MULTI_STATUS, HttpStatus.SC_PARTIAL_CONTENT, 821, 820}, new int[]{TIFFConstants.TIFFTAG_YPOSITION, TIFFConstants.TIFFTAG_XPOSITION, TIFFConstants.TIFFTAG_MAXSAMPLEVALUE, TIFFConstants.TIFFTAG_MINSAMPLEVALUE, 275, TIFFConstants.TIFFTAG_ORIENTATION, TIFFConstants.TIFFTAG_DOCUMENTNAME, 268, 263, 262, 257, 256, 251, ItemTouchHelper.Callback.DEFAULT_SWIPE_ANIMATION_DURATION, 245, C4317c.f4528X, 239, Jpeg.M_APPE, 233, 232, 227, Jpeg.M_APP2, 221, WMSTransport.SESSIONSTATE_CONNECT_REJECTED, 215, 214, 209, 208, 822, -3}, new int[]{TIFFConstants.TIFFTAG_FREEBYTECOUNTS, TIFFConstants.TIFFTAG_FREEOFFSETS, MetaDo.META_RESTOREDC, 294, 301, 300, 307, TIFFConstants.TIFFTAG_DATETIME, MetaDo.META_RESIZEPALETTE, 312, TIFFConstants.TIFFTAG_PRIMARYCHROMATICITIES, TIFFConstants.TIFFTAG_WHITEPOINT, TIFFConstants.TIFFTAG_TILEBYTECOUNTS, TIFFConstants.TIFFTAG_TILEOFFSETS, 331, TIFFConstants.TIFFTAG_SUBIFD, TIFFConstants.TIFFTAG_TARGETPRINTER, TIFFConstants.TIFFTAG_DOTRANGE, 343, 342, 349, 348, 355, 354, 361, 360, 367, 366, 824, 823}, new int[]{TIFFConstants.TIFFTAG_GRAYRESPONSECURVE, TIFFConstants.TIFFTAG_GRAYRESPONSEUNIT, TIFFConstants.TIFFTAG_PAGENUMBER, TIFFConstants.TIFFTAG_RESOLUTIONUNIT, HttpStatus.SC_SEE_OTHER, 302, 309, 308, TIFFConstants.TIFFTAG_ARTIST, 314, TIFFConstants.TIFFTAG_HALFTONEHINTS, TIFFConstants.TIFFTAG_COLORMAP, TIFFConstants.TIFFTAG_CLEANFAXDATA, TIFFConstants.TIFFTAG_BADFAXLINES, TIFFConstants.TIFFTAG_INKNAMES, TIFFConstants.TIFFTAG_INKSET, TIFFConstants.TIFFTAG_SAMPLEFORMAT, TIFFConstants.TIFFTAG_EXTRASAMPLES, 345, 344, 351, 350, 357, 356, 363, 362, 369, 368, 825, -3}, new int[]{TIFFConstants.TIFFTAG_GROUP4OPTIONS, TIFFConstants.TIFFTAG_GROUP3OPTIONS, 299, MetaDo.META_INVERTREGION, 305, HttpStatus.SC_NOT_MODIFIED, 311, 310, TIFFConstants.TIFFTAG_PREDICTOR, TIFFConstants.TIFFTAG_HOSTCOMPUTER, TIFFConstants.TIFFTAG_TILELENGTH, 322, 329, TIFFConstants.TIFFTAG_CONSECUTIVEBADFAXLINES, 335, TIFFConstants.TIFFTAG_NUMBEROFINKS, TIFFConstants.TIFFTAG_SMAXSAMPLEVALUE, TIFFConstants.TIFFTAG_SMINSAMPLEVALUE, TIFFConstants.TIFFTAG_JPEGTABLES, 346, 353, 352, 359, 358, 365, 364, 371, 370, 827, 826}, new int[]{HttpStatus.SC_CONFLICT, HttpStatus.SC_REQUEST_TIMEOUT, HttpStatus.SC_FORBIDDEN, 402, 397, 396, 391, 390, 79, 78, -2, -2, 13, 12, 37, 36, 2, -1, 44, 43, 109, 108, 385, 384, 379, 378, 373, 372, 828, -3}, new int[]{HttpStatus.SC_LENGTH_REQUIRED, HttpStatus.SC_GONE, HttpStatus.SC_METHOD_NOT_ALLOWED, HttpStatus.SC_NOT_FOUND, 399, 398, 393, 392, 81, 80, 40, -2, 15, 14, 39, 38, 3, -1, -1, 45, 111, 110, 387, 386, 381, 380, 375, 374, 830, 829}, new int[]{HttpStatus.SC_REQUEST_TOO_LONG, HttpStatus.SC_PRECONDITION_FAILED, HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED, HttpStatus.SC_NOT_ACCEPTABLE, 401, 400, 395, 394, 83, 82, 41, -3, -3, -3, -3, -3, 5, 4, 47, 46, 113, 112, 389, 388, 383, 382, 377, 376, 831, -3}, new int[]{HttpStatus.SC_UNSUPPORTED_MEDIA_TYPE, HttpStatus.SC_REQUEST_URI_TOO_LONG, 421, HttpStatus.SC_METHOD_FAILURE, 427, 426, 103, 102, 55, 54, 16, -3, -3, -3, -3, -3, -3, -3, 20, 19, 85, 84, 433, 432, 439, 438, 445, 444, 833, 832}, new int[]{HttpStatus.SC_EXPECTATION_FAILED, HttpStatus.SC_REQUESTED_RANGE_NOT_SATISFIABLE, HttpStatus.SC_LOCKED, HttpStatus.SC_UNPROCESSABLE_ENTITY, 429, 428, 105, 104, 57, 56, -3, -3, -3, -3, -3, -3, -3, -3, 22, 21, 87, 86, 435, 434, 441, 440, 447, 446, 834, -3}, new int[]{HttpStatus.SC_INSUFFICIENT_SPACE_ON_RESOURCE, 418, 425, HttpStatus.SC_FAILED_DEPENDENCY, 431, 430, 107, 106, 59, 58, -3, -3, -3, -3, -3, -3, -3, -3, -3, 23, 89, 88, 437, 436, 443, 442, 449, 448, 836, 835}, new int[]{481, WOWZMediaConfig.DEFAULT_VIDEO_FRAME_HEIGHT, 475, 474, 469, 468, 48, -2, 30, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 53, 52, 463, 462, 457, 456, 451, 450, 837, -3}, new int[]{483, 482, 477, 476, 471, 470, 49, -1, -2, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -2, -1, 465, 464, 459, 458, 453, 452, 839, 838}, new int[]{485, 484, 479, 478, 473, 472, 51, 50, 31, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 1, -2, 42, 467, 466, 461, 460, 455, 454, 840, -3}, new int[]{487, 486, 493, 492, 499, 498, 97, 96, 61, 60, -3, -3, -3, -3, -3, -3, -3, -3, -3, 26, 91, 90, 505, HttpStatus.SC_GATEWAY_TIMEOUT, FrameMetricsAggregator.EVERY_DURATION, 510, TIFFConstants.TIFFTAG_JPEGLOSSLESSPREDICTORS, 516, 842, 841}, new int[]{489, 488, 495, 494, HttpStatus.SC_NOT_IMPLEMENTED, 500, 99, 98, 63, 62, -3, -3, -3, -3, -3, -3, -3, -3, 28, 27, 93, 92, HttpStatus.SC_INSUFFICIENT_STORAGE, 506, 513, 512, TIFFConstants.TIFFTAG_JPEGQTABLES, TIFFConstants.TIFFTAG_JPEGPOINTTRANSFORM, 843, -3}, new int[]{491, 490, 497, MetaDo.META_DELETEOBJECT, HttpStatus.SC_SERVICE_UNAVAILABLE, HttpStatus.SC_BAD_GATEWAY, 101, 100, 65, 64, 17, -3, -3, -3, -3, -3, -3, -3, 18, 29, 95, 94, 509, 508, TIFFConstants.TIFFTAG_JPEGRESTARTINTERVAL, TIFFConstants.TIFFTAG_JPEGIFBYTECOUNT, 521, TIFFConstants.TIFFTAG_JPEGDCTABLES, 845, 844}, new int[]{559, 558, 553, MetaDo.META_FILLREGION, 547, 546, 541, 540, 73, 72, 32, -3, -3, -3, -3, -3, -3, 10, 67, 66, 115, 114, 535, 534, 529, 528, MetaDo.META_SETWINDOWORG, MetaDo.META_SETTEXTJUSTIFICATION, 846, -3}, new int[]{MetaDo.META_SETMAPPERFLAGS, 560, 555, 554, 549, 548, 543, 542, 75, 74, -2, -1, 7, 6, 35, 34, 11, -2, 69, 68, 117, 116, 537, 536, 531, TIFFConstants.TIFFTAG_YCBCRSUBSAMPLING, MetaDo.META_SETVIEWPORTORG, MetaDo.META_SETWINDOWEXT, 848, 847}, new int[]{563, 562, 557, 556, 551, 550, 545, MetaDo.META_OFFSETCLIPRGN, 77, 76, -2, 33, 9, 8, 25, 24, -1, -2, 71, 70, 119, 118, 539, 538, 533, 532, MetaDo.META_OFFSETWINDOWORG, MetaDo.META_SETVIEWPORTEXT, 849, -3}, new int[]{565, MetaDo.META_SELECTPALETTE, 571, 570, 577, 576, 583, 582, 589, 588, 595, 594, 601, LogSeverity.CRITICAL_VALUE, 607, 606, 613, 612, 619, 618, 625, 624, 631, 630, 637, 636, 643, 642, 851, 850}, new int[]{567, 566, 573, 572, 579, 578, 585, 584, 591, 590, 597, 596, 603, 602, 609, 608, 615, 614, 621, 620, 627, 626, 633, 632, 639, 638, 645, 644, 852, -3}, new int[]{569, 568, 575, 574, 581, 580, 587, 586, 593, 592, 599, 598, 605, 604, 611, 610, 617, 616, 623, 622, 629, 628, 635, 634, 641, WOWZMediaConfig.DEFAULT_VIDEO_FRAME_WIDTH, 647, 646, 854, 853}, new int[]{727, 726, 721, 720, 715, 714, 709, 708, 703, 702, 697, 696, 691, 690, 685, 684, 679, 678, 673, 672, 667, 666, 661, 660, 655, 654, 649, 648, 855, -3}, new int[]{729, 728, 723, 722, 717, 716, 711, 710, 705, 704, 699, 698, 693, 692, 687, 686, 681, 680, 675, 674, 669, 668, 663, 662, 657, 656, 651, 650, 857, 856}, new int[]{731, 730, 725, 724, 719, 718, 713, 712, 707, 706, 701, LogSeverity.ALERT_VALUE, 695, 694, 689, 688, 683, 682, 677, 676, 671, 670, 665, 664, 659, 658, 653, 652, 858, -3}, new int[]{733, 732, 739, 738, 745, 744, 751, 750, 757, 756, MetaDo.META_CREATEFONTINDIRECT, MetaDo.META_CREATEPENINDIRECT, 769, 768, 775, 774, 781, 780, 787, 786, 793, 792, 799, 798, MetaDo.META_POLYLINE, MetaDo.META_POLYGON, 811, 810, 860, 859}, new int[]{735, 734, 741, 740, 747, 746, 753, 752, 759, 758, 765, MetaDo.META_CREATEBRUSHINDIRECT, 771, 770, 777, 776, 783, 782, 789, 788, 795, 794, 801, LogSeverity.EMERGENCY_VALUE, 807, 806, 813, 812, 861, -3}, new int[]{737, 736, 743, 742, 749, 748, 755, 754, 761, 760, 767, 766, 773, 772, 779, 778, 785, 784, 791, 790, 797, 796, 803, 802, 809, 808, 815, 814, 863, 862}};
    private final BitMatrix bitMatrix;

    BitMatrixParser(BitMatrix bitMatrix2) {
        this.bitMatrix = bitMatrix2;
    }

    /* access modifiers changed from: package-private */
    public byte[] readCodewords() {
        byte[] bArr = new byte[CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA];
        int height = this.bitMatrix.getHeight();
        int width = this.bitMatrix.getWidth();
        for (int i = 0; i < height; i++) {
            int[] iArr = BITNR[i];
            for (int i2 = 0; i2 < width; i2++) {
                int i3 = iArr[i2];
                if (i3 >= 0 && this.bitMatrix.get(i2, i)) {
                    int i4 = i3 / 6;
                    bArr[i4] = (byte) (((byte) (1 << (5 - (i3 % 6)))) | bArr[i4]);
                }
            }
        }
        return bArr;
    }
}
