package com.lowagie.text.xml.simpleparser;

import androidx.exifinterface.media.ExifInterface;
import com.lowagie.text.Chunk;
import com.lowagie.text.Font;
import com.lowagie.text.html.HtmlTags;
import com.lowagie.text.pdf.Barcode128;
import java.util.HashMap;
import kotlin.text.Typography;

public class EntitiesToSymbol {
    public static final HashMap map = new HashMap();

    static {
        map.put("169", new Character(227));
        map.put("172", new Character(216));
        map.put("174", new Character(210));
        map.put("177", new Character(Typography.plusMinus));
        map.put("215", new Character(180));
        map.put("247", new Character(184));
        map.put("8230", new Character(188));
        map.put("8242", new Character(Typography.cent));
        map.put("8243", new Character(178));
        map.put("8260", new Character(164));
        map.put("8364", new Character(240));
        map.put("8465", new Character(193));
        map.put("8472", new Character(Barcode128.DEL));
        map.put("8476", new Character(194));
        map.put("8482", new Character(212));
        map.put("8501", new Character(192));
        map.put("8592", new Character(172));
        map.put("8593", new Character(173));
        map.put("8594", new Character(Typography.registered));
        map.put("8595", new Character(175));
        map.put("8596", new Character(Typography.leftGuillemete));
        map.put("8629", new Character(191));
        map.put("8656", new Character(220));
        map.put("8657", new Character(221));
        map.put("8658", new Character(222));
        map.put("8659", new Character(223));
        map.put("8660", new Character(219));
        map.put("8704", new Character(Typography.quote));
        map.put("8706", new Character(Typography.paragraph));
        map.put("8707", new Character(Typography.dollar));
        map.put("8709", new Character(Barcode128.SHIFT));
        map.put("8711", new Character(209));
        map.put("8712", new Character(206));
        map.put("8713", new Character(207));
        map.put("8717", new Character('\''));
        map.put("8719", new Character(213));
        map.put("8721", new Character(229));
        map.put("8722", new Character('-'));
        map.put("8727", new Character('*'));
        map.put("8729", new Character(Typography.middleDot));
        map.put("8730", new Character(214));
        map.put("8733", new Character(181));
        map.put("8734", new Character(165));
        map.put("8736", new Character(208));
        map.put("8743", new Character(217));
        map.put("8744", new Character(218));
        map.put("8745", new Character(Barcode128.CODE_C));
        map.put("8746", new Character(200));
        map.put("8747", new Character(242));
        map.put("8756", new Character('\\'));
        map.put("8764", new Character('~'));
        map.put("8773", new Character('@'));
        map.put("8776", new Character(Typography.rightGuillemete));
        map.put("8800", new Character(185));
        map.put("8801", new Character(186));
        map.put("8804", new Character(Typography.pound));
        map.put("8805", new Character(179));
        map.put("8834", new Character(Barcode128.STARTB));
        map.put("8835", new Character(201));
        map.put("8836", new Character(Barcode128.STARTA));
        map.put("8838", new Character(Barcode128.STARTC));
        map.put("8839", new Character(Barcode128.FNC1));
        map.put("8853", new Character(Barcode128.FNC2));
        map.put("8855", new Character(Barcode128.FNC3));
        map.put("8869", new Character('^'));
        map.put("8901", new Character(Typography.times));
        map.put("8992", new Character(243));
        map.put("8993", new Character(245));
        map.put("9001", new Character(225));
        map.put("9002", new Character(241));
        map.put("913", new Character('A'));
        map.put("914", new Character('B'));
        map.put("915", new Character('G'));
        map.put("916", new Character('D'));
        map.put("917", new Character('E'));
        map.put("918", new Character('Z'));
        map.put("919", new Character('H'));
        map.put("920", new Character('Q'));
        map.put("921", new Character('I'));
        map.put("922", new Character('K'));
        map.put("923", new Character('L'));
        map.put("924", new Character('M'));
        map.put("925", new Character('N'));
        map.put("926", new Character('X'));
        map.put("927", new Character('O'));
        map.put("928", new Character('P'));
        map.put("929", new Character('R'));
        map.put("931", new Character('S'));
        map.put("932", new Character('T'));
        map.put("933", new Character('U'));
        map.put("934", new Character('F'));
        map.put("935", new Character('C'));
        map.put("936", new Character('Y'));
        map.put("937", new Character('W'));
        map.put("945", new Character('a'));
        map.put("946", new Character('b'));
        map.put("947", new Character(Barcode128.START_A));
        map.put("948", new Character(Barcode128.CODE_AC_TO_B));
        map.put("949", new Character(Barcode128.CODE_BC_TO_A));
        map.put("950", new Character('z'));
        map.put("951", new Character(Barcode128.START_B));
        map.put("952", new Character('q'));
        map.put("953", new Character(Barcode128.START_C));
        map.put("954", new Character('k'));
        map.put("955", new Character('l'));
        map.put("956", new Character('m'));
        map.put("957", new Character('n'));
        map.put("958", new Character('x'));
        map.put("959", new Character('o'));
        map.put("960", new Character('p'));
        map.put("961", new Character('r'));
        map.put("962", new Character('V'));
        map.put("963", new Character('s'));
        map.put("964", new Character('t'));
        map.put("965", new Character('u'));
        map.put("966", new Character(Barcode128.FNC1_INDEX));
        map.put("967", new Character(Barcode128.CODE_AB_TO_C));
        map.put("9674", new Character(224));
        map.put("968", new Character('y'));
        map.put("969", new Character('w'));
        map.put("977", new Character('J'));
        map.put("978", new Character(161));
        map.put("981", new Character('j'));
        map.put("982", new Character('v'));
        map.put("9824", new Character(170));
        map.put("9827", new Character(Typography.section));
        map.put("9829", new Character(Typography.copyright));
        map.put("9830", new Character(168));
        map.put("Alpha", new Character('A'));
        map.put("Beta", new Character('B'));
        map.put("Chi", new Character('C'));
        map.put("Delta", new Character('D'));
        map.put("Epsilon", new Character('E'));
        map.put("Eta", new Character('H'));
        map.put(ExifInterface.TAG_GAMMA, new Character('G'));
        map.put("Iota", new Character('I'));
        map.put("Kappa", new Character('K'));
        map.put("Lambda", new Character('L'));
        map.put("Mu", new Character('M'));
        map.put("Nu", new Character('N'));
        map.put("Omega", new Character('W'));
        map.put("Omicron", new Character('O'));
        map.put("Phi", new Character('F'));
        map.put("Pi", new Character('P'));
        map.put("Prime", new Character(178));
        map.put("Psi", new Character('Y'));
        map.put("Rho", new Character('R'));
        map.put("Sigma", new Character('S'));
        map.put("Tau", new Character('T'));
        map.put("Theta", new Character('Q'));
        map.put("Upsilon", new Character('U'));
        map.put("Xi", new Character('X'));
        map.put("Zeta", new Character('Z'));
        map.put("alefsym", new Character(192));
        map.put("alpha", new Character('a'));
        map.put("and", new Character(217));
        map.put("ang", new Character(208));
        map.put("asymp", new Character(Typography.rightGuillemete));
        map.put("beta", new Character('b'));
        map.put("cap", new Character(Barcode128.CODE_C));
        map.put("chi", new Character(Barcode128.CODE_AB_TO_C));
        map.put("clubs", new Character(Typography.section));
        map.put("cong", new Character('@'));
        map.put("copy", new Character(211));
        map.put("crarr", new Character(191));
        map.put("cup", new Character(200));
        map.put("dArr", new Character(223));
        map.put("darr", new Character(175));
        map.put("delta", new Character(Barcode128.CODE_AC_TO_B));
        map.put("diams", new Character(168));
        map.put("divide", new Character(184));
        map.put("empty", new Character(Barcode128.SHIFT));
        map.put("epsilon", new Character(Barcode128.CODE_BC_TO_A));
        map.put("equiv", new Character(186));
        map.put("eta", new Character(Barcode128.START_B));
        map.put("euro", new Character(240));
        map.put("exist", new Character(Typography.dollar));
        map.put("forall", new Character(Typography.quote));
        map.put("frasl", new Character(164));
        map.put("gamma", new Character(Barcode128.START_A));
        map.put("ge", new Character(179));
        map.put("hArr", new Character(219));
        map.put("harr", new Character(Typography.leftGuillemete));
        map.put("hearts", new Character(Typography.copyright));
        map.put("hellip", new Character(188));
        map.put("horizontal arrow extender", new Character(190));
        map.put("image", new Character(193));
        map.put("infin", new Character(165));
        map.put("int", new Character(242));
        map.put("iota", new Character(Barcode128.START_C));
        map.put("isin", new Character(206));
        map.put("kappa", new Character('k'));
        map.put("lArr", new Character(220));
        map.put("lambda", new Character('l'));
        map.put("lang", new Character(225));
        map.put("large brace extender", new Character(239));
        map.put("large integral extender", new Character(244));
        map.put("large left brace (bottom)", new Character(238));
        map.put("large left brace (middle)", new Character(237));
        map.put("large left brace (top)", new Character(236));
        map.put("large left bracket (bottom)", new Character(235));
        map.put("large left bracket (extender)", new Character(234));
        map.put("large left bracket (top)", new Character(233));
        map.put("large left parenthesis (bottom)", new Character(232));
        map.put("large left parenthesis (extender)", new Character(231));
        map.put("large left parenthesis (top)", new Character(230));
        map.put("large right brace (bottom)", new Character(254));
        map.put("large right brace (middle)", new Character(253));
        map.put("large right brace (top)", new Character(252));
        map.put("large right bracket (bottom)", new Character(251));
        map.put("large right bracket (extender)", new Character(250));
        map.put("large right bracket (top)", new Character(249));
        map.put("large right parenthesis (bottom)", new Character(248));
        map.put("large right parenthesis (extender)", new Character(247));
        map.put("large right parenthesis (top)", new Character(246));
        map.put("larr", new Character(172));
        map.put("le", new Character(Typography.pound));
        map.put("lowast", new Character('*'));
        map.put("loz", new Character(224));
        map.put("minus", new Character('-'));
        map.put("mu", new Character('m'));
        map.put("nabla", new Character(209));
        map.put("ne", new Character(185));
        map.put("not", new Character(216));
        map.put("notin", new Character(207));
        map.put("nsub", new Character(Barcode128.STARTA));
        map.put("nu", new Character('n'));
        map.put("omega", new Character('w'));
        map.put("omicron", new Character('o'));
        map.put("oplus", new Character(Barcode128.FNC2));
        map.put("or", new Character(218));
        map.put("otimes", new Character(Barcode128.FNC3));
        map.put("part", new Character(Typography.paragraph));
        map.put("perp", new Character('^'));
        map.put("phi", new Character(Barcode128.FNC1_INDEX));
        map.put("pi", new Character('p'));
        map.put("piv", new Character('v'));
        map.put("plusmn", new Character(Typography.plusMinus));
        map.put("prime", new Character(Typography.cent));
        map.put("prod", new Character(213));
        map.put("prop", new Character(181));
        map.put("psi", new Character('y'));
        map.put("rArr", new Character(222));
        map.put("radic", new Character(214));
        map.put("radical extender", new Character('`'));
        map.put("rang", new Character(241));
        map.put("rarr", new Character(Typography.registered));
        map.put("real", new Character(194));
        map.put("reg", new Character(210));
        map.put("rho", new Character('r'));
        map.put("sdot", new Character(Typography.times));
        map.put("sigma", new Character('s'));
        map.put("sigmaf", new Character('V'));
        map.put("sim", new Character('~'));
        map.put("spades", new Character(170));
        map.put(HtmlTags.SUB, new Character(Barcode128.STARTB));
        map.put("sube", new Character(Barcode128.STARTC));
        map.put("sum", new Character(229));
        map.put(HtmlTags.SUP, new Character(201));
        map.put("supe", new Character(Barcode128.FNC1));
        map.put("tau", new Character('t'));
        map.put("there4", new Character('\\'));
        map.put("theta", new Character('q'));
        map.put("thetasym", new Character('J'));
        map.put("times", new Character(180));
        map.put("trade", new Character(212));
        map.put("uArr", new Character(221));
        map.put("uarr", new Character(173));
        map.put("upsih", new Character(161));
        map.put("upsilon", new Character('u'));
        map.put("vertical arrow extender", new Character(Typography.half));
        map.put("weierp", new Character(Barcode128.DEL));
        map.put("xi", new Character('x'));
        map.put("zeta", new Character('z'));
    }

    public static Chunk get(String str, Font font) {
        char correspondingSymbol = getCorrespondingSymbol(str);
        if (correspondingSymbol == 0) {
            try {
                return new Chunk(String.valueOf((char) Integer.parseInt(str)), font);
            } catch (Exception unused) {
                return new Chunk(str, font);
            }
        } else {
            return new Chunk(String.valueOf(correspondingSymbol), new Font(3, font.getSize(), font.getStyle(), font.getColor()));
        }
    }

    public static char getCorrespondingSymbol(String str) {
        Character ch = (Character) map.get(str);
        if (ch == null) {
            return 0;
        }
        return ch.charValue();
    }
}
