package repack.org.bouncycastle.crypto.engines;

import com.google.common.base.Ascii;
import com.lowagie.text.DocWriter;
import com.lowagie.text.pdf.ByteBuffer;
import com.wowza.gocoder.sdk.support.wmstransport.wms.amf.AMFData;
import repack.org.bouncycastle.crypto.BlockCipher;
import repack.org.bouncycastle.crypto.CipherParameters;
import repack.org.bouncycastle.crypto.DataLengthException;
import repack.org.bouncycastle.crypto.params.KeyParameter;

public class DESEngine implements BlockCipher {
    protected static final int BLOCK_SIZE = 8;
    private static final int[] SP1;
    private static final int[] SP2;
    private static final int[] SP3;
    private static final int[] SP4;
    private static final int[] SP5;
    private static final int[] SP6;
    private static final int[] SP7;
    private static final int[] SP8;
    private static final int[] bigbyte = {8388608, 4194304, 2097152, 1048576, 524288, 262144, 131072, 65536, 32768, 16384, 8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1};
    private static final short[] bytebit = {128, 64, 32, 16, 8, 4, 2, 1};
    private static final byte[] pc1;
    private static final byte[] pc2;
    private static final byte[] totrot = {1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, Ascii.NAK, Ascii.ETB, Ascii.f264EM, Ascii.ESC, Ascii.f266FS};
    private int[] workingKey = null;

    public String getAlgorithmName() {
        return "DES";
    }

    public int getBlockSize() {
        return 8;
    }

    public void reset() {
    }

    public void init(boolean z, CipherParameters cipherParameters) {
        if (cipherParameters instanceof KeyParameter) {
            KeyParameter keyParameter = (KeyParameter) cipherParameters;
            if (keyParameter.getKey().length <= 8) {
                this.workingKey = generateWorkingKey(z, keyParameter.getKey());
                return;
            }
            throw new IllegalArgumentException("DES key too long - should be 8 bytes");
        }
        throw new IllegalArgumentException("invalid parameter passed to DES init - " + cipherParameters.getClass().getName());
    }

    public int processBlock(byte[] bArr, int i, byte[] bArr2, int i2) {
        int[] iArr = this.workingKey;
        if (iArr == null) {
            throw new IllegalStateException("DES engine not initialised");
        } else if (i + 8 > bArr.length) {
            throw new DataLengthException("input buffer too short");
        } else if (i2 + 8 <= bArr2.length) {
            desFunc(iArr, bArr, i, bArr2, i2);
            return 8;
        } else {
            throw new DataLengthException("output buffer too short");
        }
    }

    static {
        byte[] bArr = new byte[56];
        bArr[0] = 56;
        bArr[1] = ByteBuffer.ZERO;
        bArr[2] = 40;
        bArr[3] = 32;
        bArr[4] = Ascii.CAN;
        bArr[5] = 16;
        bArr[6] = 8;
        bArr[8] = 57;
        bArr[9] = 49;
        bArr[10] = 41;
        bArr[11] = AMFData.DATA_TYPE_BYTEARRAY;
        bArr[12] = Ascii.f264EM;
        bArr[13] = 17;
        bArr[14] = 9;
        bArr[15] = 1;
        bArr[16] = 58;
        bArr[17] = 50;
        bArr[18] = 42;
        bArr[19] = 34;
        bArr[20] = Ascii.SUB;
        bArr[21] = 18;
        bArr[22] = 10;
        bArr[23] = 2;
        bArr[24] = 59;
        bArr[25] = 51;
        bArr[26] = 43;
        bArr[27] = 35;
        bArr[28] = DocWriter.f569GT;
        bArr[29] = 54;
        bArr[30] = 46;
        bArr[31] = 38;
        bArr[32] = Ascii.f271RS;
        bArr[33] = 22;
        bArr[34] = 14;
        bArr[35] = 6;
        bArr[36] = DocWriter.EQUALS;
        bArr[37] = 53;
        bArr[38] = 45;
        bArr[39] = 37;
        bArr[40] = Ascii.f267GS;
        bArr[41] = Ascii.NAK;
        bArr[42] = 13;
        bArr[43] = 5;
        bArr[44] = DocWriter.f570LT;
        bArr[45] = 52;
        bArr[46] = 44;
        bArr[47] = 36;
        bArr[48] = Ascii.f266FS;
        bArr[49] = 20;
        bArr[50] = 12;
        bArr[51] = 4;
        bArr[52] = Ascii.ESC;
        bArr[53] = 19;
        bArr[54] = 11;
        bArr[55] = 3;
        pc1 = bArr;
        byte[] bArr2 = new byte[48];
        bArr2[0] = 13;
        bArr2[1] = 16;
        bArr2[2] = 10;
        bArr2[3] = Ascii.ETB;
        bArr2[5] = 4;
        bArr2[6] = 2;
        bArr2[7] = Ascii.ESC;
        bArr2[8] = 14;
        bArr2[9] = 5;
        bArr2[10] = 20;
        bArr2[11] = 9;
        bArr2[12] = 22;
        bArr2[13] = 18;
        bArr2[14] = 11;
        bArr2[15] = 3;
        bArr2[16] = Ascii.f264EM;
        bArr2[17] = 7;
        bArr2[18] = 15;
        bArr2[19] = 6;
        bArr2[20] = Ascii.SUB;
        bArr2[21] = 19;
        bArr2[22] = 12;
        bArr2[23] = 1;
        bArr2[24] = 40;
        bArr2[25] = 51;
        bArr2[26] = Ascii.f271RS;
        bArr2[27] = 36;
        bArr2[28] = 46;
        bArr2[29] = 54;
        bArr2[30] = Ascii.f267GS;
        bArr2[31] = 39;
        bArr2[32] = 50;
        bArr2[33] = 44;
        bArr2[34] = 32;
        bArr2[35] = DocWriter.FORWARD;
        bArr2[36] = 43;
        bArr2[37] = ByteBuffer.ZERO;
        bArr2[38] = 38;
        bArr2[39] = 55;
        bArr2[40] = AMFData.DATA_TYPE_BYTEARRAY;
        bArr2[41] = 52;
        bArr2[42] = 45;
        bArr2[43] = 41;
        bArr2[44] = 49;
        bArr2[45] = 35;
        bArr2[46] = Ascii.f266FS;
        bArr2[47] = Ascii.f275US;
        pc2 = bArr2;
        int[] iArr = new int[64];
        iArr[0] = 16843776;
        iArr[2] = 65536;
        iArr[3] = 16843780;
        iArr[4] = 16842756;
        iArr[5] = 66564;
        iArr[6] = 4;
        iArr[7] = 65536;
        iArr[8] = 1024;
        iArr[9] = 16843776;
        iArr[10] = 16843780;
        iArr[11] = 1024;
        iArr[12] = 16778244;
        iArr[13] = 16842756;
        iArr[14] = 16777216;
        iArr[15] = 4;
        iArr[16] = 1028;
        iArr[17] = 16778240;
        iArr[18] = 16778240;
        iArr[19] = 66560;
        iArr[20] = 66560;
        iArr[21] = 16842752;
        iArr[22] = 16842752;
        iArr[23] = 16778244;
        iArr[24] = 65540;
        iArr[25] = 16777220;
        iArr[26] = 16777220;
        iArr[27] = 65540;
        iArr[29] = 1028;
        iArr[30] = 66564;
        iArr[31] = 16777216;
        iArr[32] = 65536;
        iArr[33] = 16843780;
        iArr[34] = 4;
        iArr[35] = 16842752;
        iArr[36] = 16843776;
        iArr[37] = 16777216;
        iArr[38] = 16777216;
        iArr[39] = 1024;
        iArr[40] = 16842756;
        iArr[41] = 65536;
        iArr[42] = 66560;
        iArr[43] = 16777220;
        iArr[44] = 1024;
        iArr[45] = 4;
        iArr[46] = 16778244;
        iArr[47] = 66564;
        iArr[48] = 16843780;
        iArr[49] = 65540;
        iArr[50] = 16842752;
        iArr[51] = 16778244;
        iArr[52] = 16777220;
        iArr[53] = 1028;
        iArr[54] = 66564;
        iArr[55] = 16843776;
        iArr[56] = 1028;
        iArr[57] = 16778240;
        iArr[58] = 16778240;
        iArr[60] = 65540;
        iArr[61] = 66560;
        iArr[63] = 16842756;
        SP1 = iArr;
        int[] iArr2 = new int[64];
        iArr2[0] = -2146402272;
        iArr2[1] = -2147450880;
        iArr2[2] = 32768;
        iArr2[3] = 1081376;
        iArr2[4] = 1048576;
        iArr2[5] = 32;
        iArr2[6] = -2146435040;
        iArr2[7] = -2147450848;
        iArr2[8] = -2147483616;
        iArr2[9] = -2146402272;
        iArr2[10] = -2146402304;
        iArr2[11] = Integer.MIN_VALUE;
        iArr2[12] = -2147450880;
        iArr2[13] = 1048576;
        iArr2[14] = 32;
        iArr2[15] = -2146435040;
        iArr2[16] = 1081344;
        iArr2[17] = 1048608;
        iArr2[18] = -2147450848;
        iArr2[20] = Integer.MIN_VALUE;
        iArr2[21] = 32768;
        iArr2[22] = 1081376;
        iArr2[23] = -2146435072;
        iArr2[24] = 1048608;
        iArr2[25] = -2147483616;
        iArr2[27] = 1081344;
        iArr2[28] = 32800;
        iArr2[29] = -2146402304;
        iArr2[30] = -2146435072;
        iArr2[31] = 32800;
        iArr2[33] = 1081376;
        iArr2[34] = -2146435040;
        iArr2[35] = 1048576;
        iArr2[36] = -2147450848;
        iArr2[37] = -2146435072;
        iArr2[38] = -2146402304;
        iArr2[39] = 32768;
        iArr2[40] = -2146435072;
        iArr2[41] = -2147450880;
        iArr2[42] = 32;
        iArr2[43] = -2146402272;
        iArr2[44] = 1081376;
        iArr2[45] = 32;
        iArr2[46] = 32768;
        iArr2[47] = Integer.MIN_VALUE;
        iArr2[48] = 32800;
        iArr2[49] = -2146402304;
        iArr2[50] = 1048576;
        iArr2[51] = -2147483616;
        iArr2[52] = 1048608;
        iArr2[53] = -2147450848;
        iArr2[54] = -2147483616;
        iArr2[55] = 1048608;
        iArr2[56] = 1081344;
        iArr2[58] = -2147450880;
        iArr2[59] = 32800;
        iArr2[60] = Integer.MIN_VALUE;
        iArr2[61] = -2146435040;
        iArr2[62] = -2146402272;
        iArr2[63] = 1081344;
        SP2 = iArr2;
        int[] iArr3 = new int[64];
        iArr3[0] = 520;
        iArr3[1] = 134349312;
        iArr3[3] = 134348808;
        iArr3[4] = 134218240;
        iArr3[6] = 131592;
        iArr3[7] = 134218240;
        iArr3[8] = 131080;
        iArr3[9] = 134217736;
        iArr3[10] = 134217736;
        iArr3[11] = 131072;
        iArr3[12] = 134349320;
        iArr3[13] = 131080;
        iArr3[14] = 134348800;
        iArr3[15] = 520;
        iArr3[16] = 134217728;
        iArr3[17] = 8;
        iArr3[18] = 134349312;
        iArr3[19] = 512;
        iArr3[20] = 131584;
        iArr3[21] = 134348800;
        iArr3[22] = 134348808;
        iArr3[23] = 131592;
        iArr3[24] = 134218248;
        iArr3[25] = 131584;
        iArr3[26] = 131072;
        iArr3[27] = 134218248;
        iArr3[28] = 8;
        iArr3[29] = 134349320;
        iArr3[30] = 512;
        iArr3[31] = 134217728;
        iArr3[32] = 134349312;
        iArr3[33] = 134217728;
        iArr3[34] = 131080;
        iArr3[35] = 520;
        iArr3[36] = 131072;
        iArr3[37] = 134349312;
        iArr3[38] = 134218240;
        iArr3[40] = 512;
        iArr3[41] = 131080;
        iArr3[42] = 134349320;
        iArr3[43] = 134218240;
        iArr3[44] = 134217736;
        iArr3[45] = 512;
        iArr3[47] = 134348808;
        iArr3[48] = 134218248;
        iArr3[49] = 131072;
        iArr3[50] = 134217728;
        iArr3[51] = 134349320;
        iArr3[52] = 8;
        iArr3[53] = 131592;
        iArr3[54] = 131584;
        iArr3[55] = 134217736;
        iArr3[56] = 134348800;
        iArr3[57] = 134218248;
        iArr3[58] = 520;
        iArr3[59] = 134348800;
        iArr3[60] = 131592;
        iArr3[61] = 8;
        iArr3[62] = 134348808;
        iArr3[63] = 131584;
        SP3 = iArr3;
        int[] iArr4 = new int[64];
        iArr4[0] = 8396801;
        iArr4[1] = 8321;
        iArr4[2] = 8321;
        iArr4[3] = 128;
        iArr4[4] = 8396928;
        iArr4[5] = 8388737;
        iArr4[6] = 8388609;
        iArr4[7] = 8193;
        iArr4[9] = 8396800;
        iArr4[10] = 8396800;
        iArr4[11] = 8396929;
        iArr4[12] = 129;
        iArr4[14] = 8388736;
        iArr4[15] = 8388609;
        iArr4[16] = 1;
        iArr4[17] = 8192;
        iArr4[18] = 8388608;
        iArr4[19] = 8396801;
        iArr4[20] = 128;
        iArr4[21] = 8388608;
        iArr4[22] = 8193;
        iArr4[23] = 8320;
        iArr4[24] = 8388737;
        iArr4[25] = 1;
        iArr4[26] = 8320;
        iArr4[27] = 8388736;
        iArr4[28] = 8192;
        iArr4[29] = 8396928;
        iArr4[30] = 8396929;
        iArr4[31] = 129;
        iArr4[32] = 8388736;
        iArr4[33] = 8388609;
        iArr4[34] = 8396800;
        iArr4[35] = 8396929;
        iArr4[36] = 129;
        iArr4[39] = 8396800;
        iArr4[40] = 8320;
        iArr4[41] = 8388736;
        iArr4[42] = 8388737;
        iArr4[43] = 1;
        iArr4[44] = 8396801;
        iArr4[45] = 8321;
        iArr4[46] = 8321;
        iArr4[47] = 128;
        iArr4[48] = 8396929;
        iArr4[49] = 129;
        iArr4[50] = 1;
        iArr4[51] = 8192;
        iArr4[52] = 8388609;
        iArr4[53] = 8193;
        iArr4[54] = 8396928;
        iArr4[55] = 8388737;
        iArr4[56] = 8193;
        iArr4[57] = 8320;
        iArr4[58] = 8388608;
        iArr4[59] = 8396801;
        iArr4[60] = 128;
        iArr4[61] = 8388608;
        iArr4[62] = 8192;
        iArr4[63] = 8396928;
        SP4 = iArr4;
        int[] iArr5 = new int[64];
        iArr5[0] = 256;
        iArr5[1] = 34078976;
        iArr5[2] = 34078720;
        iArr5[3] = 1107296512;
        iArr5[4] = 524288;
        iArr5[5] = 256;
        iArr5[6] = 1073741824;
        iArr5[7] = 34078720;
        iArr5[8] = 1074266368;
        iArr5[9] = 524288;
        iArr5[10] = 33554688;
        iArr5[11] = 1074266368;
        iArr5[12] = 1107296512;
        iArr5[13] = 1107820544;
        iArr5[14] = 524544;
        iArr5[15] = 1073741824;
        iArr5[16] = 33554432;
        iArr5[17] = 1074266112;
        iArr5[18] = 1074266112;
        iArr5[20] = 1073742080;
        iArr5[21] = 1107820800;
        iArr5[22] = 1107820800;
        iArr5[23] = 33554688;
        iArr5[24] = 1107820544;
        iArr5[25] = 1073742080;
        iArr5[27] = 1107296256;
        iArr5[28] = 34078976;
        iArr5[29] = 33554432;
        iArr5[30] = 1107296256;
        iArr5[31] = 524544;
        iArr5[32] = 524288;
        iArr5[33] = 1107296512;
        iArr5[34] = 256;
        iArr5[35] = 33554432;
        iArr5[36] = 1073741824;
        iArr5[37] = 34078720;
        iArr5[38] = 1107296512;
        iArr5[39] = 1074266368;
        iArr5[40] = 33554688;
        iArr5[41] = 1073741824;
        iArr5[42] = 1107820544;
        iArr5[43] = 34078976;
        iArr5[44] = 1074266368;
        iArr5[45] = 256;
        iArr5[46] = 33554432;
        iArr5[47] = 1107820544;
        iArr5[48] = 1107820800;
        iArr5[49] = 524544;
        iArr5[50] = 1107296256;
        iArr5[51] = 1107820800;
        iArr5[52] = 34078720;
        iArr5[54] = 1074266112;
        iArr5[55] = 1107296256;
        iArr5[56] = 524544;
        iArr5[57] = 33554688;
        iArr5[58] = 1073742080;
        iArr5[59] = 524288;
        iArr5[61] = 1074266112;
        iArr5[62] = 34078976;
        iArr5[63] = 1073742080;
        SP5 = iArr5;
        int[] iArr6 = new int[64];
        iArr6[0] = 536870928;
        iArr6[1] = 541065216;
        iArr6[2] = 16384;
        iArr6[3] = 541081616;
        iArr6[4] = 541065216;
        iArr6[5] = 16;
        iArr6[6] = 541081616;
        iArr6[7] = 4194304;
        iArr6[8] = 536887296;
        iArr6[9] = 4210704;
        iArr6[10] = 4194304;
        iArr6[11] = 536870928;
        iArr6[12] = 4194320;
        iArr6[13] = 536887296;
        iArr6[14] = 536870912;
        iArr6[15] = 16400;
        iArr6[17] = 4194320;
        iArr6[18] = 536887312;
        iArr6[19] = 16384;
        iArr6[20] = 4210688;
        iArr6[21] = 536887312;
        iArr6[22] = 16;
        iArr6[23] = 541065232;
        iArr6[24] = 541065232;
        iArr6[26] = 4210704;
        iArr6[27] = 541081600;
        iArr6[28] = 16400;
        iArr6[29] = 4210688;
        iArr6[30] = 541081600;
        iArr6[31] = 536870912;
        iArr6[32] = 536887296;
        iArr6[33] = 16;
        iArr6[34] = 541065232;
        iArr6[35] = 4210688;
        iArr6[36] = 541081616;
        iArr6[37] = 4194304;
        iArr6[38] = 16400;
        iArr6[39] = 536870928;
        iArr6[40] = 4194304;
        iArr6[41] = 536887296;
        iArr6[42] = 536870912;
        iArr6[43] = 16400;
        iArr6[44] = 536870928;
        iArr6[45] = 541081616;
        iArr6[46] = 4210688;
        iArr6[47] = 541065216;
        iArr6[48] = 4210704;
        iArr6[49] = 541081600;
        iArr6[51] = 541065232;
        iArr6[52] = 16;
        iArr6[53] = 16384;
        iArr6[54] = 541065216;
        iArr6[55] = 4210704;
        iArr6[56] = 16384;
        iArr6[57] = 4194320;
        iArr6[58] = 536887312;
        iArr6[60] = 541081600;
        iArr6[61] = 536870912;
        iArr6[62] = 4194320;
        iArr6[63] = 536887312;
        SP6 = iArr6;
        int[] iArr7 = new int[64];
        iArr7[0] = 2097152;
        iArr7[1] = 69206018;
        iArr7[2] = 67110914;
        iArr7[4] = 2048;
        iArr7[5] = 67110914;
        iArr7[6] = 2099202;
        iArr7[7] = 69208064;
        iArr7[8] = 69208066;
        iArr7[9] = 2097152;
        iArr7[11] = 67108866;
        iArr7[12] = 2;
        iArr7[13] = 67108864;
        iArr7[14] = 69206018;
        iArr7[15] = 2050;
        iArr7[16] = 67110912;
        iArr7[17] = 2099202;
        iArr7[18] = 2097154;
        iArr7[19] = 67110912;
        iArr7[20] = 67108866;
        iArr7[21] = 69206016;
        iArr7[22] = 69208064;
        iArr7[23] = 2097154;
        iArr7[24] = 69206016;
        iArr7[25] = 2048;
        iArr7[26] = 2050;
        iArr7[27] = 69208066;
        iArr7[28] = 2099200;
        iArr7[29] = 2;
        iArr7[30] = 67108864;
        iArr7[31] = 2099200;
        iArr7[32] = 67108864;
        iArr7[33] = 2099200;
        iArr7[34] = 2097152;
        iArr7[35] = 67110914;
        iArr7[36] = 67110914;
        iArr7[37] = 69206018;
        iArr7[38] = 69206018;
        iArr7[39] = 2;
        iArr7[40] = 2097154;
        iArr7[41] = 67108864;
        iArr7[42] = 67110912;
        iArr7[43] = 2097152;
        iArr7[44] = 69208064;
        iArr7[45] = 2050;
        iArr7[46] = 2099202;
        iArr7[47] = 69208064;
        iArr7[48] = 2050;
        iArr7[49] = 67108866;
        iArr7[50] = 69208066;
        iArr7[51] = 69206016;
        iArr7[52] = 2099200;
        iArr7[54] = 2;
        iArr7[55] = 69208066;
        iArr7[57] = 2099202;
        iArr7[58] = 69206016;
        iArr7[59] = 2048;
        iArr7[60] = 67108866;
        iArr7[61] = 67110912;
        iArr7[62] = 2048;
        iArr7[63] = 2097154;
        SP7 = iArr7;
        int[] iArr8 = new int[64];
        iArr8[0] = 268439616;
        iArr8[1] = 4096;
        iArr8[2] = 262144;
        iArr8[3] = 268701760;
        iArr8[4] = 268435456;
        iArr8[5] = 268439616;
        iArr8[6] = 64;
        iArr8[7] = 268435456;
        iArr8[8] = 262208;
        iArr8[9] = 268697600;
        iArr8[10] = 268701760;
        iArr8[11] = 266240;
        iArr8[12] = 268701696;
        iArr8[13] = 266304;
        iArr8[14] = 4096;
        iArr8[15] = 64;
        iArr8[16] = 268697600;
        iArr8[17] = 268435520;
        iArr8[18] = 268439552;
        iArr8[19] = 4160;
        iArr8[20] = 266240;
        iArr8[21] = 262208;
        iArr8[22] = 268697664;
        iArr8[23] = 268701696;
        iArr8[24] = 4160;
        iArr8[27] = 268697664;
        iArr8[28] = 268435520;
        iArr8[29] = 268439552;
        iArr8[30] = 266304;
        iArr8[31] = 262144;
        iArr8[32] = 266304;
        iArr8[33] = 262144;
        iArr8[34] = 268701696;
        iArr8[35] = 4096;
        iArr8[36] = 64;
        iArr8[37] = 268697664;
        iArr8[38] = 4096;
        iArr8[39] = 266304;
        iArr8[40] = 268439552;
        iArr8[41] = 64;
        iArr8[42] = 268435520;
        iArr8[43] = 268697600;
        iArr8[44] = 268697664;
        iArr8[45] = 268435456;
        iArr8[46] = 262144;
        iArr8[47] = 268439616;
        iArr8[49] = 268701760;
        iArr8[50] = 262208;
        iArr8[51] = 268435520;
        iArr8[52] = 268697600;
        iArr8[53] = 268439552;
        iArr8[54] = 268439616;
        iArr8[56] = 268701760;
        iArr8[57] = 266240;
        iArr8[58] = 266240;
        iArr8[59] = 4160;
        iArr8[60] = 4160;
        iArr8[61] = 262208;
        iArr8[62] = 268435456;
        iArr8[63] = 268701696;
        SP8 = iArr8;
    }

    /* access modifiers changed from: protected */
    public int[] generateWorkingKey(boolean z, byte[] bArr) {
        int i;
        int[] iArr = new int[32];
        boolean[] zArr = new boolean[56];
        boolean[] zArr2 = new boolean[56];
        int i2 = 0;
        while (true) {
            boolean z2 = true;
            if (i2 >= 56) {
                break;
            }
            byte b = pc1[i2];
            if ((bytebit[b & 7] & bArr[b >>> 3]) == 0) {
                z2 = false;
            }
            zArr[i2] = z2;
            i2++;
        }
        for (int i3 = 0; i3 < 16; i3++) {
            int i4 = z ? i3 << 1 : (15 - i3) << 1;
            int i5 = i4 + 1;
            iArr[i5] = 0;
            iArr[i4] = 0;
            int i6 = 0;
            while (true) {
                if (i6 >= 28) {
                    break;
                }
                int i7 = totrot[i3] + i6;
                if (i7 < 28) {
                    zArr2[i6] = zArr[i7];
                } else {
                    zArr2[i6] = zArr[i7 - 28];
                }
                i6++;
            }
            for (i = 28; i < 56; i++) {
                int i8 = totrot[i3] + i;
                if (i8 < 56) {
                    zArr2[i] = zArr[i8];
                } else {
                    zArr2[i] = zArr[i8 - 28];
                }
            }
            for (int i9 = 0; i9 < 24; i9++) {
                if (zArr2[pc2[i9]]) {
                    iArr[i4] = iArr[i4] | bigbyte[i9];
                }
                if (zArr2[pc2[i9 + 24]]) {
                    iArr[i5] = iArr[i5] | bigbyte[i9];
                }
            }
        }
        for (int i10 = 0; i10 != 32; i10 += 2) {
            int i11 = iArr[i10];
            int i12 = i10 + 1;
            int i13 = iArr[i12];
            iArr[i10] = ((16515072 & i13) >>> 10) | ((i11 & 16515072) << 6) | ((i11 & 4032) << 10) | ((i13 & 4032) >>> 6);
            iArr[i12] = ((i11 & 63) << 16) | ((i11 & 258048) << 12) | ((258048 & i13) >>> 4) | (i13 & 63);
        }
        return iArr;
    }

    /* access modifiers changed from: protected */
    public void desFunc(int[] iArr, byte[] bArr, int i, byte[] bArr2, int i2) {
        byte b = ((bArr[i + 0] & 255) << Ascii.CAN) | ((bArr[i + 1] & 255) << 16) | ((bArr[i + 2] & 255) << 8) | (bArr[i + 3] & 255);
        byte b2 = ((bArr[i + 4] & 255) << Ascii.CAN) | ((bArr[i + 5] & 255) << 16) | ((bArr[i + 6] & 255) << 8) | (bArr[i + 7] & 255);
        byte b3 = ((b >>> 4) ^ b2) & 252645135;
        byte b4 = b2 ^ b3;
        byte b5 = b ^ (b3 << 4);
        byte b6 = ((b5 >>> 16) ^ b4) & 65535;
        byte b7 = b4 ^ b6;
        byte b8 = b5 ^ (b6 << 16);
        byte b9 = ((b7 >>> 2) ^ b8) & 858993459;
        byte b10 = b8 ^ b9;
        byte b11 = b7 ^ (b9 << 2);
        byte b12 = ((b11 >>> 8) ^ b10) & 16711935;
        byte b13 = b10 ^ b12;
        byte b14 = b11 ^ (b12 << 8);
        byte b15 = (((b14 >>> Ascii.f275US) & 1) | (b14 << 1)) & -1;
        byte b16 = (b13 ^ b15) & -1431655766;
        byte b17 = b13 ^ b16;
        byte b18 = b15 ^ b16;
        int i3 = (((b17 >>> Ascii.f275US) & 1) | (b17 << 1)) & -1;
        for (int i4 = 0; i4 < 8; i4++) {
            int i5 = i4 * 4;
            int i6 = ((b18 << Ascii.f266FS) | (b18 >>> 4)) ^ iArr[i5 + 0];
            int[] iArr2 = SP7;
            int i7 = iArr2[i6 & 63];
            int[] iArr3 = SP5;
            int i8 = i7 | iArr3[(i6 >>> 8) & 63];
            int[] iArr4 = SP3;
            int i9 = i8 | iArr4[(i6 >>> 16) & 63];
            int[] iArr5 = SP1;
            int i10 = iArr5[(i6 >>> 24) & 63] | i9;
            byte b19 = iArr[i5 + 1] ^ b18;
            int[] iArr6 = SP8;
            int i11 = i10 | iArr6[b19 & 63];
            int[] iArr7 = SP6;
            int i12 = i11 | iArr7[(b19 >>> 8) & 63];
            int[] iArr8 = SP4;
            int i13 = i12 | iArr8[(b19 >>> 16) & 63];
            int[] iArr9 = SP2;
            i3 ^= i13 | iArr9[(b19 >>> Ascii.CAN) & 63];
            int i14 = ((i3 << 28) | (i3 >>> 4)) ^ iArr[i5 + 2];
            int i15 = iArr5[(i14 >>> 24) & 63];
            int i16 = iArr[i5 + 3] ^ i3;
            b18 ^= ((((i15 | ((iArr2[i14 & 63] | iArr3[(i14 >>> 8) & 63]) | iArr4[(i14 >>> 16) & 63])) | iArr6[i16 & 63]) | iArr7[(i16 >>> 8) & 63]) | iArr8[(i16 >>> 16) & 63]) | iArr9[(i16 >>> 24) & 63];
        }
        int i17 = (b18 >>> 1) | (b18 << Ascii.f275US);
        int i18 = (i3 ^ i17) & -1431655766;
        int i19 = i3 ^ i18;
        int i20 = i17 ^ i18;
        int i21 = (i19 >>> 1) | (i19 << 31);
        int i22 = ((i21 >>> 8) ^ i20) & 16711935;
        int i23 = i20 ^ i22;
        int i24 = i21 ^ (i22 << 8);
        int i25 = ((i24 >>> 2) ^ i23) & 858993459;
        int i26 = i23 ^ i25;
        int i27 = i24 ^ (i25 << 2);
        int i28 = ((i26 >>> 16) ^ i27) & 65535;
        int i29 = i27 ^ i28;
        int i30 = i26 ^ (i28 << 16);
        int i31 = ((i30 >>> 4) ^ i29) & 252645135;
        int i32 = i29 ^ i31;
        int i33 = i30 ^ (i31 << 4);
        bArr2[i2 + 0] = (byte) ((i33 >>> 24) & 255);
        bArr2[i2 + 1] = (byte) ((i33 >>> 16) & 255);
        bArr2[i2 + 2] = (byte) ((i33 >>> 8) & 255);
        bArr2[i2 + 3] = (byte) (i33 & 255);
        bArr2[i2 + 4] = (byte) ((i32 >>> 24) & 255);
        bArr2[i2 + 5] = (byte) ((i32 >>> 16) & 255);
        bArr2[i2 + 6] = (byte) ((i32 >>> 8) & 255);
        bArr2[i2 + 7] = (byte) (i32 & 255);
    }
}
